generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Room {
  id            String    @id @default(cuid())
  code          String    @unique
  gameType      String    
  status        String    @default("WAITING")
  language      String
  timeLimit     Int
  pass          Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  players       RoomPlayer[]
  game          Game?
}

model RoomPlayer {
  id            String    @id @default(cuid())
  role          String    
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  room          Room      @relation(fields: [roomId], references: [id])
  roomId        String
  joinedAt      DateTime  @default(now())

  @@unique([roomId, userId, role])
}

model Game {
  id            String    @id @default(cuid())
  room          Room      @relation(fields: [roomId], references: [id])
  roomId        String    @unique
  score         Int       @default(0)
  startedAt     DateTime  @default(now())
  endedAt       DateTime?
  words         GameWord[]
}

model GameWord {
  id            String    @id @default(cuid())
  game          Game      @relation(fields: [gameId], references: [id])
  gameId        String
  word          Word      @relation(fields: [wordId], references: [id])
  wordId        String
  status        String    @default("PENDING")
  order         Int
  updatedAt     DateTime  @updatedAt

  @@unique([gameId, order])
}

model Word {
  id         String   @id @default(cuid())
  word       String
  language   String
  difficulty Int     @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  gameWords  GameWord[]
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? 
    access_token             String? 
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? 
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    gamesPlayed   Int       @default(0)
    highScore     Int       @default(0)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    rooms         RoomPlayer[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
